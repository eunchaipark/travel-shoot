version: "3.8"

services:
  mysql-db:
    build:
      context: ./mysql
    container_name: mysql8-container
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: mysql
      MYSQL_DATABASE: memory_forest
      MYSQL_USER: kcc
      MYSQL_PASSWORD: kcc
      TZ: Asia/Seoul
    command: --lower_case_table_names=1 --default-time-zone='+09:00'
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backendnet
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pmysql"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: redis-container
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - backendnet


  # === Spring Boot Backend ===
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: spring-backend
    depends_on:
      mysql-db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/memory_forest?useSSL=false&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: kcc
      SPRING_DATASOURCE_PASSWORD: kcc
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
    volumes:
      - ./backend/src:/app/src
    networks:
      - backendnet
      - webnet

  # === React Frontend ===
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: react-frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true  # Force file change detection
      - WATCHPACK_POLLING=true
#    depends_on:
#      - backend
    ports:
      - "3000:3000"
    networks:
      - webnet

  # === NGINX Proxy ===
  nginx:
    image: nginx:stable-alpine
    container_name: nginx-proxy
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./frontend/dist:/usr/share/nginx/html
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
    networks:
      - webnet
networks:
  webnet:
    driver: bridge
  backendnet:
    driver: bridge

volumes:
  mysql-data:
  redis-data: